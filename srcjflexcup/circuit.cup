import java_cup.runtime.*;

/* Preliminaries to set up and use the scanner.  */
//init with {: scanner.init();              :};
//scan with {: return scanner.next_token(); :};

/* TERMINALI */
terminal SEMI, COMMA, ID, INT, STRING, FLOAT, BOOL;
terminal PROC, LPAR, RPAR, COLON, CORP, VOID, IF, THEN, ELIF, FI, ELSE, WHILE, DO, OD;
terminal READ, WRITE, ASSIGN, PLUS, MINUS, TIMES, DIV, EQ, NE, LT, LE, GT, GE;
terminal AND, OR, NOT, NULL, TRUE, FALSE,RETURN, UMINUS;
terminal Integer INT_CONST;
terminal Float FLOAT_CONST;
terminal String STRING_CONST;

/* NON TERMINALI */
nonterminal Program, VarDeclList, ProcList, VarDecl, Type, IdListInit;
nonterminal Proc, ResultTypeList, ReturnExprs, ExprList, ParamDeclList;
nonterminal ParDecl, IdList, ResultType, StatList, Stat, IfStat, ElifList, Elif, Else;
nonterminal WhileStat, ReadlnStat, WriteStat, AssignStat, CallProc, Expr;

//Precedenze e associatività

precedence left LT,GT, LE, GE, EQ;
precedence left NE;
precedence right NOT;
precedence left OR;
precedence left AND;


precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence left UMINUS;

/* Specifiche lessicali e grammaticali del linguaggio Toy*/

Program ::= VarDeclList ProcList;

VarDeclList ::= /* empty */
    | VarDecl VarDeclList;

ProcList ::= /* empty */
    | Proc ProcList;

VarDecl ::= Type IdListInit SEMI;

Type ::= INT
    | BOOL
    | FLOAT
    | STRING;

IdListInit ::= ID
    | IdListInit COMMA ID
    | ID ASSIGN Expr
    | IdListInit COMMA ID ASSIGN Expr;

Proc ::= PROC ID LPAR ParamDeclList RPAR ResultTypeList COLON
		VarDeclList StatList RETURN ReturnExprs CORP SEMI
	|PROC ID LPAR ParamDeclList RPAR ResultTypeList COLON
		VarDeclList RETURN ReturnExprs CORP SEMI
	| PROC ID LPAR RPAR ResultTypeList COLON
		VarDeclList StatList RETURN ReturnExprs CORP SEMI
	| PROC ID LPAR RPAR ResultTypeList COLON
		VarDeclList RETURN ReturnExprs CORP SEMI;

ResultTypeList ::= ResultType
    | ResultType COMMA ResultTypeList;

ReturnExprs::= ExprList
    | /* empty */;

ExprList::= Expr
    | Expr COMMA ExprList;

ParamDeclList ::= ParDecl
    | ParamDeclList SEMI ParDecl;

ParDecl ::= Type IdList;

IdList ::= ID
    | IdList COMMA ID;

ResultType ::= Type
    | VOID;


/* empty
StatList ::= Stat
    | Stat StatList;

Stat ::= IfStat SEMI
    | WhileStat SEMI
    | ReadlnStat SEMI
    | WriteStat SEMI
    | AssignStat SEMI
    | CallProc SEMI
    | /* empty */


StatList ::= Stat  | Stat StatList;

Stat ::= IfStat SEMI
	| WhileStat SEMI
	| ReadlnStat SEMI
	| WriteStat SEMI
	| AssignStat SEMI
	| CallProc SEMI;


IfStat ::= IF Expr THEN StatList ElifList Else FI;

ElifList ::= /* empty */
    | Elif ElifList;

Elif ::= ELIF Expr THEN StatList;

Else ::= /* empty */
    | ELSE StatList;

//modificata
/* WhileStat ::= WHILE StatList Expr DO StatList OD
    | WHILE Expr DO StatList OD;            perchè statlist può andare in stat che va in empty*/

WhileStat ::= WHILE StatList RETURN Expr DO StatList OD
	| WHILE Expr DO StatList OD;

ReadlnStat ::= READ LPAR IdList RPAR;

WriteStat ::= WRITE LPAR ExprList RPAR;

AssignStat ::= IdList ASSIGN ExprList;

CallProc ::= ID LPAR ExprList RPAR
    | ID LPAR RPAR;

Expr ::= NULL       {: RESULT =null; :}
    | TRUE          {: RESULT =true; :}
    | FALSE         {: RESULT =false; :}
    | INT_CONST
    | FLOAT_CONST
    | STRING_CONST
    | ID
    | CallProc
    | Expr:e1 PLUS Expr:e2      {: RESULT =e1+e2; :}
    | Expr:e1 MINUS Expr:e2     {: RESULT =e1-e2; :}
    | Expr:e1 TIMES Expr:e2     {: RESULT =e1*e2; :}
    | Expr:e1 DIV Expr:e2       {: RESULT =e1/e2; :}
    | Expr:e1 AND Expr:e2       {: RESULT =e1 && e2; :}
    | Expr:e1 OR Expr:e2        {: RESULT =e1 || e2; :}
    | Expr:e1 GT Expr:e2        {: RESULT =e1 > e2; :}
    | Expr:e1 GE Expr:e2        {: RESULT =e1 >= e2; :}
    | Expr:e1 LT Expr:e2        {: RESULT =e1 < e2; :}
    | Expr:e1 LE Expr:e2        {: RESULT =e1 <= e2; :}
    | Expr:e1 EQ Expr:e2        {: RESULT =e1 == e2; :}
    | Expr:e1 NE Expr:e2        {: RESULT =e1!=e2; :}
    | MINUS Expr:e             {: RESULT = -e; :} %prec UMINUS
    | NOT Expr:e               {: RESULT =!e; :}
    ;


