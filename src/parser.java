
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import nodes.nonterminals.*;
import nodes.terminals.*;
import nodes.nonterminals.*;
import nodes.expression.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\003\004\000\002\002\004\000\002\004" +
    "\004\000\002\004\002\000\002\005\003\000\002\005\004" +
    "\000\002\006\005\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\002\003\000\002" +
    "\002\005\000\002\002\005\000\002\002\007\000\002\010" +
    "\017\000\002\010\016\000\002\010\016\000\002\010\015" +
    "\000\002\011\003\000\002\011\005\000\002\012\003\000" +
    "\002\012\002\000\002\013\003\000\002\013\005\000\002" +
    "\014\003\000\002\014\005\000\002\015\004\000\002\016" +
    "\003\000\002\016\005\000\002\017\003\000\002\017\003" +
    "\000\002\020\003\000\002\020\004\000\002\021\004\000" +
    "\002\021\004\000\002\021\004\000\002\021\004\000\002" +
    "\021\004\000\002\021\004\000\002\022\011\000\002\023" +
    "\002\000\002\023\004\000\002\024\006\000\002\025\002" +
    "\000\002\025\004\000\002\026\011\000\002\026\007\000" +
    "\002\032\006\000\002\033\006\000\002\027\005\000\002" +
    "\030\006\000\002\030\005\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\004\000" +
    "\002\031\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\014\004\013\005\011\006\012\007\007\012" +
    "\ufffe\001\002\000\004\002\246\001\002\000\004\012\102" +
    "\001\002\000\004\055\015\001\002\000\010\011\ufff7\015" +
    "\ufff7\055\ufff7\001\002\000\030\004\013\005\011\006\012" +
    "\007\007\012\ufffe\017\ufffe\024\ufffe\027\ufffe\030\ufffe\050" +
    "\ufffe\055\ufffe\001\002\000\010\011\ufff9\015\ufff9\055\ufff9" +
    "\001\002\000\010\011\ufff8\015\ufff8\055\ufff8\001\002\000" +
    "\010\011\ufffa\015\ufffa\055\ufffa\001\002\000\020\012\uffff" +
    "\017\uffff\024\uffff\027\uffff\030\uffff\050\uffff\055\uffff\001" +
    "\002\000\010\010\ufff6\011\ufff6\031\077\001\002\000\006" +
    "\010\020\011\017\001\002\000\004\055\021\001\002\000" +
    "\030\004\ufffb\005\ufffb\006\ufffb\007\ufffb\012\ufffb\017\ufffb" +
    "\024\ufffb\027\ufffb\030\ufffb\050\ufffb\055\ufffb\001\002\000" +
    "\010\010\ufff5\011\ufff5\031\022\001\002\000\024\033\024" +
    "\046\035\051\033\052\030\054\032\055\034\056\025\057" +
    "\023\060\031\001\002\000\046\010\uffc8\011\uffc8\014\uffc8" +
    "\016\uffc8\020\uffc8\025\uffc8\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\045\uffc8\001\002\000\024\033\024\046\035\051" +
    "\033\052\030\054\032\055\034\056\025\057\023\060\031" +
    "\001\002\000\046\010\uffc9\011\uffc9\014\uffc9\016\uffc9\020" +
    "\uffc9\025\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045" +
    "\uffc9\001\002\000\036\010\ufff3\011\ufff3\032\042\033\037" +
    "\034\047\035\045\036\043\037\050\040\051\041\044\042" +
    "\046\043\041\044\040\045\052\001\002\000\046\010\uffc5" +
    "\011\uffc5\014\uffc5\016\uffc5\020\uffc5\025\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5" +
    "\042\uffc5\043\uffc5\044\uffc5\045\uffc5\001\002\000\046\010" +
    "\uffcb\011\uffcb\014\uffcb\016\uffcb\020\uffcb\025\uffcb\032\uffcb" +
    "\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\001\002\000\046" +
    "\010\uffc7\011\uffc7\014\uffc7\016\uffc7\020\uffc7\025\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7" +
    "\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\001\002\000" +
    "\046\010\uffcc\011\uffcc\014\uffcc\016\uffcc\020\uffcc\025\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040" +
    "\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\001\002" +
    "\000\046\010\uffca\011\uffca\014\uffca\016\uffca\020\uffca\025" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca" +
    "\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\001" +
    "\002\000\050\010\uffc6\011\uffc6\013\067\014\uffc6\016\uffc6" +
    "\020\uffc6\025\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\001\002\000\024\033\024\046\035\051\033\052" +
    "\030\054\032\055\034\056\025\057\023\060\031\001\002" +
    "\000\046\010\uffb7\011\uffb7\014\uffb7\016\uffb7\020\uffb7\025" +
    "\uffb7\032\042\033\037\034\047\035\045\036\uffb7\037\uffb7" +
    "\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\001" +
    "\002\000\024\033\024\046\035\051\033\052\030\054\032" +
    "\055\034\056\025\057\023\060\031\001\002\000\024\033" +
    "\024\046\035\051\033\052\030\054\032\055\034\056\025" +
    "\057\023\060\031\001\002\000\024\033\024\046\035\051" +
    "\033\052\030\054\032\055\034\056\025\057\023\060\031" +
    "\001\002\000\024\033\024\046\035\051\033\052\030\054" +
    "\032\055\034\056\025\057\023\060\031\001\002\000\024" +
    "\033\024\046\035\051\033\052\030\054\032\055\034\056" +
    "\025\057\023\060\031\001\002\000\024\033\024\046\035" +
    "\051\033\052\030\054\032\055\034\056\025\057\023\060" +
    "\031\001\002\000\024\033\024\046\035\051\033\052\030" +
    "\054\032\055\034\056\025\057\023\060\031\001\002\000" +
    "\024\033\024\046\035\051\033\052\030\054\032\055\034" +
    "\056\025\057\023\060\031\001\002\000\024\033\024\046" +
    "\035\051\033\052\030\054\032\055\034\056\025\057\023" +
    "\060\031\001\002\000\024\033\024\046\035\051\033\052" +
    "\030\054\032\055\034\056\025\057\023\060\031\001\002" +
    "\000\024\033\024\046\035\051\033\052\030\054\032\055" +
    "\034\056\025\057\023\060\031\001\002\000\024\033\024" +
    "\046\035\051\033\052\030\054\032\055\034\056\025\057" +
    "\023\060\031\001\002\000\046\010\uffbf\011\uffbf\014\uffbf" +
    "\016\uffbf\020\uffbf\025\uffbf\032\042\033\037\034\047\035" +
    "\045\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\044\040\045\uffbf\001\002\000\046\010\uffbc\011\uffbc\014" +
    "\uffbc\016\uffbc\020\uffbc\025\uffbc\032\042\033\037\034\047" +
    "\035\045\036\uffbc\037\050\040\uffbc\041\uffbc\042\uffbc\043" +
    "\uffbc\044\040\045\052\001\002\000\046\010\uffb9\011\uffb9" +
    "\014\uffb9\016\uffb9\020\uffb9\025\uffb9\032\042\033\037\034" +
    "\047\035\045\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9" +
    "\043\uffb9\044\040\045\052\001\002\000\046\010\uffc2\011" +
    "\uffc2\014\uffc2\016\uffc2\020\uffc2\025\uffc2\032\uffc2\033\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\045\uffc2\001\002\000\046\010\uffbe" +
    "\011\uffbe\014\uffbe\016\uffbe\020\uffbe\025\uffbe\032\042\033" +
    "\037\034\047\035\045\036\uffbe\037\050\040\uffbe\041\uffbe" +
    "\042\uffbe\043\uffbe\044\040\045\052\001\002\000\046\010" +
    "\uffc1\011\uffc1\014\uffc1\016\uffc1\020\uffc1\025\uffc1\032\uffc1" +
    "\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041" +
    "\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\001\002\000\046" +
    "\010\uffbb\011\uffbb\014\uffbb\016\uffbb\020\uffbb\025\uffbb\032" +
    "\042\033\037\034\047\035\045\036\uffbb\037\050\040\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\044\040\045\052\001\002\000" +
    "\046\010\uffba\011\uffba\014\uffba\016\uffba\020\uffba\025\uffba" +
    "\032\042\033\037\034\047\035\045\036\uffba\037\050\040" +
    "\uffba\041\uffba\042\uffba\043\uffba\044\040\045\052\001\002" +
    "\000\046\010\uffc4\011\uffc4\014\uffc4\016\uffc4\020\uffc4\025" +
    "\uffc4\032\uffc4\033\uffc4\034\047\035\045\036\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\001" +
    "\002\000\046\010\uffbd\011\uffbd\014\uffbd\016\uffbd\020\uffbd" +
    "\025\uffbd\032\042\033\037\034\047\035\045\036\uffbd\037" +
    "\050\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\040\045\052" +
    "\001\002\000\046\010\uffc0\011\uffc0\014\uffc0\016\uffc0\020" +
    "\uffc0\025\uffc0\032\042\033\037\034\047\035\045\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045" +
    "\uffc0\001\002\000\046\010\uffc3\011\uffc3\014\uffc3\016\uffc3" +
    "\020\uffc3\025\uffc3\032\uffc3\033\uffc3\034\047\035\045\036" +
    "\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3" +
    "\045\uffc3\001\002\000\026\014\072\033\024\046\035\051" +
    "\033\052\030\054\032\055\034\056\025\057\023\060\031" +
    "\001\002\000\042\010\uffea\011\074\014\uffea\016\uffea\032" +
    "\042\033\037\034\047\035\045\036\043\037\050\040\051" +
    "\041\044\042\046\043\041\044\040\045\052\001\002\000" +
    "\004\014\073\001\002\000\046\010\uffcd\011\uffcd\014\uffcd" +
    "\016\uffcd\020\uffcd\025\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\045\uffcd\001\002\000\046\010\uffce\011\uffce\014" +
    "\uffce\016\uffce\020\uffce\025\uffce\032\uffce\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043" +
    "\uffce\044\uffce\045\uffce\001\002\000\024\033\024\046\035" +
    "\051\033\052\030\054\032\055\034\056\025\057\023\060" +
    "\031\001\002\000\010\010\uffe9\014\uffe9\016\uffe9\001\002" +
    "\000\046\010\uffb8\011\uffb8\014\uffb8\016\uffb8\020\uffb8\025" +
    "\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\001" +
    "\002\000\024\033\024\046\035\051\033\052\030\054\032" +
    "\055\034\056\025\057\023\060\031\001\002\000\036\010" +
    "\ufff4\011\ufff4\032\042\033\037\034\047\035\045\036\043" +
    "\037\050\040\051\041\044\042\046\043\041\044\040\045" +
    "\052\001\002\000\004\002\001\001\002\000\004\055\105" +
    "\001\002\000\006\002\ufffd\012\102\001\002\000\004\002" +
    "\ufffc\001\002\000\004\013\106\001\002\000\014\004\013" +
    "\005\011\006\012\007\007\014\111\001\002\000\004\055" +
    "\223\001\002\000\006\010\226\014\227\001\002\000\014" +
    "\004\013\005\011\006\012\007\007\053\116\001\002\000" +
    "\006\010\uffe8\014\uffe8\001\002\000\006\011\uffe3\015\uffe3" +
    "\001\002\000\004\015\121\001\002\000\006\011\117\015" +
    "\uffee\001\002\000\006\011\uffe2\015\uffe2\001\002\000\014" +
    "\004\013\005\011\006\012\007\007\053\116\001\002\000" +
    "\004\015\uffed\001\002\000\026\004\013\005\011\006\012" +
    "\007\007\017\ufffe\024\ufffe\027\ufffe\030\ufffe\050\ufffe\055" +
    "\ufffe\001\002\000\016\017\130\024\124\027\123\030\134" +
    "\050\141\055\133\001\002\000\004\013\222\001\002\000" +
    "\034\017\130\024\124\027\123\030\134\033\024\046\035" +
    "\051\033\052\030\054\032\055\210\056\025\057\023\060" +
    "\031\001\002\000\004\010\205\001\002\000\004\010\204" +
    "\001\002\000\004\010\203\001\002\000\024\033\024\046" +
    "\035\051\033\052\030\054\032\055\034\056\025\057\023" +
    "\060\031\001\002\000\004\050\161\001\002\000\004\010" +
    "\160\001\002\000\010\011\uffe5\013\067\031\uffe5\001\002" +
    "\000\004\013\155\001\002\000\004\010\154\001\002\000" +
    "\006\011\150\031\151\001\002\000\004\010\147\001\002" +
    "\000\026\017\130\021\uffe1\022\uffe1\023\uffe1\024\124\026" +
    "\uffe1\027\123\030\134\050\uffe1\055\133\001\002\000\026" +
    "\016\uffeb\033\024\046\035\051\033\052\030\054\032\055" +
    "\034\056\025\057\023\060\031\001\002\000\004\016\uffec" +
    "\001\002\000\004\016\144\001\002\000\004\010\145\001" +
    "\002\000\006\002\uffef\012\uffef\001\002\000\014\021\uffe0" +
    "\022\uffe0\023\uffe0\026\uffe0\050\uffe0\001\002\000\026\017" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\050\uffdc\055\uffdc\001\002\000\004\055\153\001" +
    "\002\000\024\033\024\046\035\051\033\052\030\054\032" +
    "\055\034\056\025\057\023\060\031\001\002\000\004\010" +
    "\uffcf\001\002\000\012\010\uffe4\011\uffe4\014\uffe4\031\uffe4" +
    "\001\002\000\026\017\uffdd\021\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\050\uffdd\055\uffdd\001\002" +
    "\000\024\033\024\046\035\051\033\052\030\054\032\055" +
    "\034\056\025\057\023\060\031\001\002\000\004\014\157" +
    "\001\002\000\004\010\uffd0\001\002\000\026\017\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\026\uffdb\027\uffdb\030\uffdb" +
    "\050\uffdb\055\uffdb\001\002\000\026\016\uffeb\033\024\046" +
    "\035\051\033\052\030\054\032\055\034\056\025\057\023" +
    "\060\031\001\002\000\004\016\163\001\002\000\004\010" +
    "\164\001\002\000\006\002\ufff1\012\ufff1\001\002\000\034" +
    "\020\166\032\042\033\037\034\047\035\045\036\043\037" +
    "\050\040\051\041\044\042\046\043\041\044\040\045\052" +
    "\001\002\000\014\017\130\024\124\027\123\030\134\055" +
    "\133\001\002\000\010\021\171\022\uffd8\023\uffd8\001\002" +
    "\000\006\022\uffd5\023\177\001\002\000\024\033\024\046" +
    "\035\051\033\052\030\054\032\055\034\056\025\057\023" +
    "\060\031\001\002\000\010\021\171\022\uffd8\023\uffd8\001" +
    "\002\000\006\022\uffd7\023\uffd7\001\002\000\034\020\175" +
    "\032\042\033\037\034\047\035\045\036\043\037\050\040" +
    "\051\041\044\042\046\043\041\044\040\045\052\001\002" +
    "\000\014\017\130\024\124\027\123\030\134\055\133\001" +
    "\002\000\010\021\uffd6\022\uffd6\023\uffd6\001\002\000\014" +
    "\017\130\024\124\027\123\030\134\055\133\001\002\000" +
    "\004\022\201\001\002\000\004\010\uffd9\001\002\000\004" +
    "\022\uffd4\001\002\000\026\017\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\026\uffdf\027\uffdf\030\uffdf\050\uffdf\055\uffdf" +
    "\001\002\000\026\017\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\026\uffda\027\uffda\030\uffda\050\uffda\055\uffda\001\002" +
    "\000\026\017\uffde\021\uffde\022\uffde\023\uffde\024\uffde\026" +
    "\uffde\027\uffde\030\uffde\050\uffde\055\uffde\001\002\000\036" +
    "\010\204\025\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5" +
    "\045\uffc5\001\002\000\034\025\217\032\042\033\037\034" +
    "\047\035\045\036\043\037\050\040\051\041\044\042\046" +
    "\043\041\044\040\045\052\001\002\000\042\011\uffe5\013" +
    "\067\025\uffc6\031\uffe5\032\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044" +
    "\uffc6\045\uffc6\001\002\000\004\050\212\001\002\000\024" +
    "\033\024\046\035\051\033\052\030\054\032\055\034\056" +
    "\025\057\023\060\031\001\002\000\034\025\214\032\042" +
    "\033\037\034\047\035\045\036\043\037\050\040\051\041" +
    "\044\042\046\043\041\044\040\045\052\001\002\000\014" +
    "\017\130\024\124\027\123\030\134\055\133\001\002\000" +
    "\004\026\216\001\002\000\004\010\uffd3\001\002\000\014" +
    "\017\130\024\124\027\123\030\134\055\133\001\002\000" +
    "\004\026\221\001\002\000\004\010\uffd2\001\002\000\004" +
    "\055\223\001\002\000\010\010\uffe5\011\uffe5\014\uffe5\001" +
    "\002\000\006\011\150\014\225\001\002\000\004\010\uffd1" +
    "\001\002\000\012\004\013\005\011\006\012\007\007\001" +
    "\002\000\014\004\013\005\011\006\012\007\007\053\116" +
    "\001\002\000\004\015\231\001\002\000\026\004\013\005" +
    "\011\006\012\007\007\017\ufffe\024\ufffe\027\ufffe\030\ufffe" +
    "\050\ufffe\055\ufffe\001\002\000\016\017\130\024\124\027" +
    "\123\030\134\050\234\055\133\001\002\000\004\050\240" +
    "\001\002\000\026\016\uffeb\033\024\046\035\051\033\052" +
    "\030\054\032\055\034\056\025\057\023\060\031\001\002" +
    "\000\004\016\236\001\002\000\004\010\237\001\002\000" +
    "\006\002\ufff0\012\ufff0\001\002\000\026\016\uffeb\033\024" +
    "\046\035\051\033\052\030\054\032\055\034\056\025\057" +
    "\023\060\031\001\002\000\004\016\242\001\002\000\004" +
    "\010\243\001\002\000\006\002\ufff2\012\ufff2\001\002\000" +
    "\006\010\uffe7\014\uffe7\001\002\000\010\010\uffe6\011\150" +
    "\014\uffe6\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\012\003\003\004\004\006\007\007\005\001" +
    "\001\000\002\001\001\000\006\005\100\010\102\001\001" +
    "\000\004\002\015\001\001\000\002\001\001\000\010\004" +
    "\013\006\007\007\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\026\031\025\001\001\000" +
    "\002\001\001\000\006\030\026\031\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\026\031\035\001\001\000" +
    "\002\001\001\000\006\030\026\031\065\001\001\000\006" +
    "\030\026\031\064\001\001\000\006\030\026\031\063\001" +
    "\001\000\006\030\026\031\062\001\001\000\006\030\026" +
    "\031\061\001\001\000\006\030\026\031\060\001\001\000" +
    "\006\030\026\031\057\001\001\000\006\030\026\031\056" +
    "\001\001\000\006\030\026\031\055\001\001\000\006\030" +
    "\026\031\054\001\001\000\006\030\026\031\053\001\001" +
    "\000\006\030\026\031\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\070\030\026\031\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\074\030\026\031\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\026" +
    "\031\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\103\010\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\106\014\107\015" +
    "\111\001\001\000\004\016\244\001\001\000\002\001\001" +
    "\000\010\007\112\011\113\017\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\112\011\117\017\114\001" +
    "\001\000\002\001\001\000\010\004\121\006\007\007\005" +
    "\001\001\000\024\016\135\020\130\021\137\022\126\026" +
    "\124\027\131\030\125\032\134\033\136\001\001\000\002" +
    "\001\001\000\026\016\135\020\210\021\137\022\126\026" +
    "\124\027\131\030\205\031\206\032\134\033\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\030\026\031\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\016\135" +
    "\020\145\021\137\022\126\026\124\027\131\030\125\032" +
    "\134\033\136\001\001\000\012\012\142\013\141\030\026" +
    "\031\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\151\030\026\031" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\155\030\026\031\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\161\013\141\030\026\031\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\016\135\020\166\021\137\022\126\026\124\027" +
    "\131\030\125\032\134\033\136\001\001\000\006\023\167" +
    "\024\171\001\001\000\004\025\177\001\001\000\006\030" +
    "\026\031\173\001\001\000\006\023\172\024\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\016\135\020" +
    "\175\021\137\022\126\026\124\027\131\030\125\032\134" +
    "\033\136\001\001\000\002\001\001\000\024\016\135\020" +
    "\201\021\137\022\126\026\124\027\131\030\125\032\134" +
    "\033\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\026\031\212\001\001" +
    "\000\002\001\001\000\024\016\135\020\214\021\137\022" +
    "\126\026\124\027\131\030\125\032\134\033\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\016\135\020" +
    "\217\021\137\022\126\026\124\027\131\030\125\032\134" +
    "\033\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\106\015\243\001\001\000" +
    "\010\007\112\011\227\017\114\001\001\000\002\001\001" +
    "\000\010\004\231\006\007\007\005\001\001\000\024\016" +
    "\135\020\232\021\137\022\126\026\124\027\131\030\125" +
    "\032\134\033\136\001\001\000\002\001\001\000\012\012" +
    "\234\013\141\030\026\031\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\240\013" +
    "\141\030\026\031\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }


	Yylex lexer;

	public parser(Yylex lexer){
	    super(lexer);
	    this.lexer = lexer;
    }
    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= VarDeclList ProcList 
            {
              ProgramOP RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VarDeclOP> vl = (ArrayList<VarDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ProcOP> pl = (ArrayList<ProcOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProgramOP(vl, pl) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramOP start_val = (ProgramOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VarDeclList ::= VarDecl VarDeclList 
            {
              ArrayList<VarDeclOP> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclOP e = (VarDeclOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VarDeclOP> list = (ArrayList<VarDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<VarDeclOP>)list).add(e);
                                            RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarDeclList ::= 
            {
              ArrayList<VarDeclOP> RESULT =null;
		RESULT = new ArrayList<VarDeclOP>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProcList ::= Proc 
            {
              ArrayList<ProcOP> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcOP e = (ProcOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ProcOP> list = new ArrayList<ProcOP>(); list.add(e); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProcList ::= Proc ProcList 
            {
              ArrayList<ProcOP> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcOP e = (ProcOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ProcOP> list = (ArrayList<ProcOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<ProcOP>)list).add(e);  RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecl ::= Type IdListInit SEMI 
            {
              VarDeclOP RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeOP type = (TypeOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<IdInitOP> idList = (ArrayList<IdInitOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new VarDeclOP(type, idList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Type ::= INT 
            {
              TypeOP RESULT =null;
		RESULT = new TypeOP("int");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= BOOL 
            {
              TypeOP RESULT =null;
		RESULT = new TypeOP("bool");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= FLOAT 
            {
              TypeOP RESULT =null;
		RESULT = new TypeOP("float");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= STRING 
            {
              TypeOP RESULT =null;
		RESULT = new TypeOP("string");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IdListInit ::= ID 
            {
              ArrayList<IdInitOP> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<IdInitOP> list = new ArrayList<IdInitOP>(); list.add(new IdInitOP(new Constant("ID",id))); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IdListInit ::= IdListInit COMMA ID 
            {
              ArrayList<IdInitOP> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<IdInitOP> list = (ArrayList<IdInitOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList<IdInitOP>)list).add(new IdInitOP(new Constant("ID",id))); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdListInit ::= ID ASSIGN Expr 
            {
              ArrayList<IdInitOP> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<IdInitOP> list = new ArrayList<IdInitOP>(); list.add(new IdInitOP(new AssignStatOP(new Constant("ID",id),e))); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdListInit ::= IdListInit COMMA ID ASSIGN Expr 
            {
              ArrayList<IdInitOP> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<IdInitOP> list = (ArrayList<IdInitOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList<IdInitOP>)list).add(new IdInitOP(new AssignStatOP(new Constant("ID",id),e))); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Proc ::= PROC ID LPAR ParamDeclList RPAR ResultTypeList COLON VarDeclList StatList RETURN ReturnExprs CORP SEMI 
            {
              ProcOP RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ArrayList<ParDeclOP> pl = (ArrayList<ParDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int rtlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rtlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ArrayList<ResultTypeOP> rtl = (ArrayList<ResultTypeOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<VarDeclOP> vdl = (ArrayList<VarDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<StatOP> sl = (ArrayList<StatOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ReturnExprsOP re = (ReturnExprsOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= new ProcOP(new Constant("ID",id),pl,rtl,new ProcBodyOP(vdl,sl,re));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Proc ::= PROC ID LPAR RPAR ResultTypeList COLON VarDeclList StatList RETURN ReturnExprs CORP SEMI 
            {
              ProcOP RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int rtlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rtlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ArrayList<ResultTypeOP> rtl = (ArrayList<ResultTypeOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<VarDeclOP> vdl = (ArrayList<VarDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<StatOP> sl = (ArrayList<StatOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ReturnExprsOP re = (ReturnExprsOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= new ProcOP(new Constant("ID",id),rtl,new ProcBodyOP(vdl,sl,re));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Proc ::= PROC ID LPAR ParamDeclList RPAR ResultTypeList COLON VarDeclList RETURN ReturnExprs CORP SEMI 
            {
              ProcOP RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ArrayList<ParDeclOP> pl = (ArrayList<ParDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int rtlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rtlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<ResultTypeOP> rtl = (ArrayList<ResultTypeOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<VarDeclOP> vdl = (ArrayList<VarDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ReturnExprsOP re = (ReturnExprsOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= new ProcOP(new Constant("ID",id),pl,rtl,new ProcBodyOP(vdl,re));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Proc ::= PROC ID LPAR RPAR ResultTypeList COLON VarDeclList RETURN ReturnExprs CORP SEMI 
            {
              ProcOP RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int rtlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rtlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<ResultTypeOP> rtl = (ArrayList<ResultTypeOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<VarDeclOP> vdl = (ArrayList<VarDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ReturnExprsOP re = (ReturnExprsOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= new ProcOP(new Constant("ID",id),rtl,new ProcBodyOP(vdl,re));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ResultTypeList ::= ResultType 
            {
              ArrayList<ResultTypeOP> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ResultTypeOP r = (ResultTypeOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ResultTypeOP> list = new ArrayList<ResultTypeOP>(); list.add(r); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultTypeList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ResultTypeList ::= ResultType COMMA ResultTypeList 
            {
              ArrayList<ResultTypeOP> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ResultTypeOP r = (ResultTypeOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ResultTypeOP> list = (ArrayList<ResultTypeOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<ResultTypeOP>)list).add(r); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultTypeList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ReturnExprs ::= ExprList 
            {
              ReturnExprsOP RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExpressionOP> el = (ArrayList<ExpressionOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ReturnExprsOP(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnExprs",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ReturnExprs ::= 
            {
              ReturnExprsOP RESULT =null;
		RESULT = new ReturnExprsOP(new Constant("VOID"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnExprs",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ExprList ::= Expr 
            {
              ArrayList<ExpressionOP> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ExpressionOP> list = new ArrayList<ExpressionOP>(); list.add(e); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ExprList ::= Expr COMMA ExprList 
            {
              ArrayList<ExpressionOP> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExpressionOP> list = (ArrayList<ExpressionOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<ExpressionOP>)list).add(e); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ParamDeclList ::= ParDecl 
            {
              ArrayList<ParDeclOP> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDeclOP p = (ParDeclOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ParDeclOP> list = new ArrayList<ParDeclOP>(); list.add(p); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ParamDeclList ::= ParamDeclList SEMI ParDecl 
            {
              ArrayList<ParDeclOP> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ParDeclOP> list = (ArrayList<ParDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDeclOP p = (ParDeclOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList<ParDeclOP>)list).add(p); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParDecl ::= Type IdList 
            {
              ParDeclOP RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeOP t = (TypeOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Constant> list = (ArrayList<Constant>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ParDeclOP(t,list);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IdList ::= ID 
            {
              ArrayList<Constant> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Constant> list = new ArrayList<Constant>(); list.add(new Constant("ID",id)); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IdList ::= IdList COMMA ID 
            {
              ArrayList<Constant> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Constant> list = (ArrayList<Constant>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<Constant>)list).add(new Constant("ID",id)); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ResultType ::= Type 
            {
              ResultTypeOP RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeOP t = (TypeOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ResultTypeOP(t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultType",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ResultType ::= VOID 
            {
              ResultTypeOP RESULT =null;
		RESULT = new ResultTypeOP(new Constant("VOID"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultType",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // StatList ::= Stat 
            {
              ArrayList<StatOP> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatOP s = (StatOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<StatOP> list = new ArrayList<StatOP>(); list.add(s); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // StatList ::= Stat StatList 
            {
              ArrayList<StatOP> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatOP s = (StatOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<StatOP> list = (ArrayList<StatOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList<StatOP>)list).add(s); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stat ::= IfStat SEMI 
            {
              StatOP RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IfOP i = (IfOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =new StatOP(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stat ::= WhileStat SEMI 
            {
              StatOP RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WhileOP w = (WhileOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =new StatOP(w);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= ReadlnStat SEMI 
            {
              StatOP RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ReadlnOP re = (ReadlnOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =new StatOP(re);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stat ::= WriteStat SEMI 
            {
              StatOP RESULT =null;
		int wrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WriteOP wr = (WriteOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =new StatOP(wr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stat ::= AssignStat SEMI 
            {
              StatOP RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssignOP a = (AssignOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =new StatOP(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= CallProc SEMI 
            {
              StatOP RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CallProcOP c = (CallProcOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =new StatOP(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IfStat ::= IF Expr THEN StatList ElifList Else FI 
            {
              IfOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExpressionOP e = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<StatOP> sl = (ArrayList<StatOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ElifOP> el = (ArrayList<ElifOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElseOP els = (ElseOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new IfOP(e,new BodyOP(sl),el,els);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ElifList ::= 
            {
              ArrayList<ElifOP> RESULT =null;
		RESULT = new ArrayList<ElifOP>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElifList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ElifList ::= Elif ElifList 
            {
              ArrayList<ElifOP> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElifOP e = (ElifOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ElifOP> list = (ArrayList<ElifOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<ElifOP>)list).add(e); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElifList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Elif ::= ELIF Expr THEN StatList 
            {
              ElifOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<StatOP> sl = (ArrayList<StatOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ElifOP(e,new BodyOP(sl));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elif",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Else ::= 
            {
              ElseOP RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Else ::= ELSE StatList 
            {
              ElseOP RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<StatOP> sl = (ArrayList<StatOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ElseOP(new BodyOP(sl));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // WhileStat ::= WHILE StatList RETURN Expr DO StatList OD 
            {
              WhileOP RESULT =null;
		int sl1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sl1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<StatOP> sl1 = (ArrayList<StatOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExpressionOP e = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sl2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sl2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<StatOP> sl2 = (ArrayList<StatOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new WhileOP(new BodyOP(sl1),e,new BodyOP(sl2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // WhileStat ::= WHILE Expr DO StatList OD 
            {
              WhileOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExpressionOP e = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<StatOP> sl = (ArrayList<StatOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new WhileOP(e,new BodyOP(sl));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ReadlnStat ::= READ LPAR IdList RPAR 
            {
              ReadlnOP RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Constant> list = (ArrayList<Constant>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ReadlnOP(list);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadlnStat",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // WriteStat ::= WRITE LPAR ExprList RPAR 
            {
              WriteOP RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExpressionOP> list = (ArrayList<ExpressionOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new WriteOP(list);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // AssignStat ::= IdList ASSIGN ExprList 
            {
              AssignOP RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Constant> idList = (ArrayList<Constant>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExpressionOP> eList = (ArrayList<ExpressionOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AssignOP(idList,eList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CallProc ::= ID LPAR ExprList RPAR 
            {
              CallProcOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExpressionOP> list = (ArrayList<ExpressionOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CallProcOP(new Constant("ID",e1), new ArrayList<ExpressionOP>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallProc",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CallProc ::= ID LPAR RPAR 
            {
              CallProcOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new CallProcOP(new Constant("ID",e1)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallProc",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr ::= NULL 
            {
              ExpressionOP RESULT =null;
		RESULT =  new Constant("NULL",null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr ::= TRUE 
            {
              ExpressionOP RESULT =null;
		RESULT =  new Constant("TRUE",null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr ::= FALSE 
            {
              ExpressionOP RESULT =null;
		RESULT =  new Constant("FALSE",null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= INT_CONST 
            {
              ExpressionOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Constant("INT_CONST",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= FLOAT_CONST 
            {
              ExpressionOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Constant("FLOAT_CONST",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= STRING_CONST 
            {
              ExpressionOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Constant("STRING_CONST",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= ID 
            {
              ExpressionOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("<ID,"+e+">");RESULT = new Constant("ID",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= CallProc 
            {
              ExpressionOP RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallProcOP c = (CallProcOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= Expr PLUS Expr 
            {
              ExpressionOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e1 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e2 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new PlusOP(e1,e2 );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= Expr MINUS Expr 
            {
              ExpressionOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e1 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e2 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new MinusOP(e1,e2 );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Expr TIMES Expr 
            {
              ExpressionOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e1 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e2 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new TimesOP(e1,e2 );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= Expr DIV Expr 
            {
              ExpressionOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e1 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e2 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new DivOP(e1,e2 );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= Expr AND Expr 
            {
              ExpressionOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e1 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e2 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new AndOP(e1,e2 );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= Expr OR Expr 
            {
              ExpressionOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e1 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e2 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new OrOP(e1,e2 );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Expr GT Expr 
            {
              ExpressionOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e1 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e2 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new GtOP(e1,e2 );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr GE Expr 
            {
              ExpressionOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e1 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e2 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new GeOP(e1,e2 );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr LT Expr 
            {
              ExpressionOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e1 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e2 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new LtOP(e1,e2 );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr LE Expr 
            {
              ExpressionOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e1 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e2 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new LeOP(e1,e2 );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Expr EQ Expr 
            {
              ExpressionOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e1 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e2 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new EqOP(e1,e2 );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr NE Expr 
            {
              ExpressionOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e1 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e2 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new NeOP(e1,e2 );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= MINUS Expr 
            {
              ExpressionOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new UminusOP(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= NOT Expr 
            {
              ExpressionOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new NotOP(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
