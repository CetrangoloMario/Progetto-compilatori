
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import nodes.nonterminals.*;
import nodes.terminals.*;
import nodes.nonterminals.*;
import nodes.expression.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\003\004\000\002\002\004\000\002\004" +
    "\004\000\002\004\002\000\002\005\003\000\002\005\004" +
    "\000\002\006\005\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\002\003\000\002" +
    "\002\005\000\002\002\005\000\002\002\007\000\002\023" +
    "\017\000\002\023\016\000\002\023\016\000\002\023\015" +
    "\000\002\024\003\000\002\024\005\000\002\025\003\000" +
    "\002\025\002\000\002\026\003\000\002\026\005\000\002" +
    "\027\003\000\002\027\005\000\002\030\004\000\002\031" +
    "\003\000\002\031\005\000\002\032\003\000\002\032\003" +
    "\000\002\033\003\000\002\033\004\000\002\016\004\000" +
    "\002\016\004\000\002\016\004\000\002\016\004\000\002" +
    "\016\004\000\002\016\004\000\002\017\011\000\002\020" +
    "\002\000\002\020\004\000\002\021\006\000\002\022\002" +
    "\000\002\022\004\000\002\010\011\000\002\010\007\000" +
    "\002\014\006\000\002\015\006\000\002\011\005\000\002" +
    "\012\006\000\002\012\005\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\004\000" +
    "\002\013\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\014\010\ufffe\011\ufffe\012\ufffe\013\ufffe\016" +
    "\ufffe\001\002\000\004\002\245\001\002\000\014\010\007" +
    "\011\010\012\016\013\012\016\013\001\002\000\004\004" +
    "\234\001\002\000\010\004\ufffa\015\ufffa\021\ufffa\001\002" +
    "\000\010\004\ufff9\015\ufff9\021\ufff9\001\002\000\030\004" +
    "\uffff\010\uffff\011\uffff\012\uffff\013\uffff\016\uffff\023\uffff" +
    "\030\uffff\033\uffff\034\uffff\054\uffff\001\002\000\010\004" +
    "\ufff7\015\ufff7\021\ufff7\001\002\000\004\004\020\001\002" +
    "\000\006\002\001\016\013\001\002\000\006\002\ufffd\016" +
    "\ufffd\001\002\000\010\004\ufff8\015\ufff8\021\ufff8\001\002" +
    "\000\006\002\ufffc\016\ufffc\001\002\000\004\017\021\001" +
    "\002\000\014\010\007\011\010\012\016\013\012\020\024" +
    "\001\002\000\004\004\210\001\002\000\006\014\214\020" +
    "\215\001\002\000\014\010\007\011\010\012\016\013\012" +
    "\057\031\001\002\000\006\014\uffe8\020\uffe8\001\002\000" +
    "\006\015\uffe3\021\uffe3\001\002\000\006\015\032\021\033" +
    "\001\002\000\006\015\uffee\021\uffee\001\002\000\006\015" +
    "\uffe2\021\uffe2\001\002\000\014\010\007\011\010\012\016" +
    "\013\012\057\031\001\002\000\026\004\ufffe\010\ufffe\011" +
    "\ufffe\012\ufffe\013\ufffe\023\ufffe\030\ufffe\033\ufffe\034\ufffe" +
    "\054\ufffe\001\002\000\026\004\046\010\007\011\010\012" +
    "\016\013\012\023\044\030\040\033\035\034\045\054\042" +
    "\001\002\000\004\017\207\001\002\000\026\004\uffe1\023" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\054\uffe1\001\002\000\004\014\206\001\002\000" +
    "\034\004\174\005\063\006\062\007\070\023\044\030\040" +
    "\033\035\034\045\037\061\052\074\055\072\056\067\060" +
    "\071\001\002\000\004\014\171\001\002\000\026\004\073" +
    "\005\063\006\062\007\070\022\uffeb\037\061\052\074\055" +
    "\072\056\067\060\071\001\002\000\004\014\165\001\002" +
    "\000\024\004\073\005\063\006\062\007\070\037\061\052" +
    "\074\055\072\056\067\060\071\001\002\000\004\017\144" +
    "\001\002\000\010\015\uffe5\017\126\035\uffe5\001\002\000" +
    "\016\004\046\023\044\030\040\033\035\034\045\054\137" +
    "\001\002\000\006\015\057\035\060\001\002\000\004\014" +
    "\056\001\002\000\004\014\055\001\002\000\004\014\054" +
    "\001\002\000\026\004\uffdf\023\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\032\uffdf\033\uffdf\034\uffdf\054\uffdf\001\002" +
    "\000\026\004\uffdc\023\uffdc\025\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\032\uffdc\033\uffdc\034\uffdc\054\uffdc\001\002\000\026" +
    "\004\uffde\023\uffde\025\uffde\026\uffde\027\uffde\030\uffde\032" +
    "\uffde\033\uffde\034\uffde\054\uffde\001\002\000\004\004\135" +
    "\001\002\000\024\004\073\005\063\006\062\007\070\037" +
    "\061\052\074\055\072\056\067\060\071\001\002\000\024" +
    "\004\073\005\063\006\062\007\070\037\061\052\074\055" +
    "\072\056\067\060\071\001\002\000\046\014\uffc8\015\uffc8" +
    "\020\uffc8\022\uffc8\024\uffc8\031\uffc8\036\uffc8\037\uffc8\040" +
    "\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\050\uffc8\051\uffc8\001\002\000\046\014\uffc9\015" +
    "\uffc9\020\uffc9\022\uffc9\024\uffc9\031\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046" +
    "\uffc9\047\uffc9\050\uffc9\051\uffc9\001\002\000\042\014\uffea" +
    "\015\uffea\020\uffea\022\uffea\036\101\037\076\040\106\041" +
    "\104\042\102\043\107\044\110\045\103\046\105\047\100" +
    "\050\077\051\111\001\002\000\046\014\uffc5\015\uffc5\020" +
    "\uffc5\022\uffc5\024\uffc5\031\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\051\uffc5\001\002\000\006\014\uffcf\015\131" +
    "\001\002\000\046\014\uffcb\015\uffcb\020\uffcb\022\uffcb\024" +
    "\uffcb\031\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb" +
    "\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051" +
    "\uffcb\001\002\000\046\014\uffc7\015\uffc7\020\uffc7\022\uffc7" +
    "\024\uffc7\031\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\001\002\000\046\014\uffcc\015\uffcc\020\uffcc\022" +
    "\uffcc\024\uffcc\031\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050" +
    "\uffcc\051\uffcc\001\002\000\046\014\uffca\015\uffca\020\uffca" +
    "\022\uffca\024\uffca\031\uffca\036\uffca\037\uffca\040\uffca\041" +
    "\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca" +
    "\050\uffca\051\uffca\001\002\000\050\014\uffc6\015\uffc6\017" +
    "\126\020\uffc6\022\uffc6\024\uffc6\031\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046" +
    "\uffc6\047\uffc6\050\uffc6\051\uffc6\001\002\000\024\004\073" +
    "\005\063\006\062\007\070\037\061\052\074\055\072\056" +
    "\067\060\071\001\002\000\046\014\uffb7\015\uffb7\020\uffb7" +
    "\022\uffb7\024\uffb7\031\uffb7\036\101\037\076\040\106\041" +
    "\104\042\102\043\107\044\110\045\103\046\105\047\100" +
    "\050\uffb7\051\uffb7\001\002\000\024\004\073\005\063\006" +
    "\062\007\070\037\061\052\074\055\072\056\067\060\071" +
    "\001\002\000\024\004\073\005\063\006\062\007\070\037" +
    "\061\052\074\055\072\056\067\060\071\001\002\000\024" +
    "\004\073\005\063\006\062\007\070\037\061\052\074\055" +
    "\072\056\067\060\071\001\002\000\024\004\073\005\063" +
    "\006\062\007\070\037\061\052\074\055\072\056\067\060" +
    "\071\001\002\000\024\004\073\005\063\006\062\007\070" +
    "\037\061\052\074\055\072\056\067\060\071\001\002\000" +
    "\024\004\073\005\063\006\062\007\070\037\061\052\074" +
    "\055\072\056\067\060\071\001\002\000\024\004\073\005" +
    "\063\006\062\007\070\037\061\052\074\055\072\056\067" +
    "\060\071\001\002\000\024\004\073\005\063\006\062\007" +
    "\070\037\061\052\074\055\072\056\067\060\071\001\002" +
    "\000\024\004\073\005\063\006\062\007\070\037\061\052" +
    "\074\055\072\056\067\060\071\001\002\000\024\004\073" +
    "\005\063\006\062\007\070\037\061\052\074\055\072\056" +
    "\067\060\071\001\002\000\024\004\073\005\063\006\062" +
    "\007\070\037\061\052\074\055\072\056\067\060\071\001" +
    "\002\000\024\004\073\005\063\006\062\007\070\037\061" +
    "\052\074\055\072\056\067\060\071\001\002\000\046\014" +
    "\uffbf\015\uffbf\020\uffbf\022\uffbf\024\uffbf\031\uffbf\036\101" +
    "\037\076\040\106\041\104\042\102\043\107\044\110\045" +
    "\103\046\105\047\100\050\077\051\uffbf\001\002\000\046" +
    "\014\uffbc\015\uffbc\020\uffbc\022\uffbc\024\uffbc\031\uffbc\036" +
    "\101\037\076\040\106\041\104\042\uffbc\043\107\044\uffbc" +
    "\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\001\002\000" +
    "\046\014\uffb9\015\uffb9\020\uffb9\022\uffb9\024\uffb9\031\uffb9" +
    "\036\101\037\076\040\106\041\104\042\uffb9\043\uffb9\044" +
    "\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\001\002" +
    "\000\046\014\uffc2\015\uffc2\020\uffc2\022\uffc2\024\uffc2\031" +
    "\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2" +
    "\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\001" +
    "\002\000\046\014\uffbe\015\uffbe\020\uffbe\022\uffbe\024\uffbe" +
    "\031\uffbe\036\101\037\076\040\106\041\104\042\uffbe\043" +
    "\107\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe" +
    "\001\002\000\046\014\uffc1\015\uffc1\020\uffc1\022\uffc1\024" +
    "\uffc1\031\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1" +
    "\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\001\002\000\046\014\uffbb\015\uffbb\020\uffbb\022\uffbb" +
    "\024\uffbb\031\uffbb\036\101\037\076\040\106\041\104\042" +
    "\uffbb\043\107\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb" +
    "\051\uffbb\001\002\000\046\014\uffba\015\uffba\020\uffba\022" +
    "\uffba\024\uffba\031\uffba\036\101\037\076\040\106\041\104" +
    "\042\uffba\043\107\044\uffba\045\uffba\046\uffba\047\uffba\050" +
    "\uffba\051\uffba\001\002\000\046\014\uffc4\015\uffc4\020\uffc4" +
    "\022\uffc4\024\uffc4\031\uffc4\036\uffc4\037\uffc4\040\106\041" +
    "\104\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\001\002\000\046\014\uffbd\015\uffbd\020" +
    "\uffbd\022\uffbd\024\uffbd\031\uffbd\036\101\037\076\040\106" +
    "\041\104\042\uffbd\043\107\044\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\051\uffbd\001\002\000\046\014\uffc0\015\uffc0" +
    "\020\uffc0\022\uffc0\024\uffc0\031\uffc0\036\101\037\076\040" +
    "\106\041\104\042\102\043\107\044\110\045\103\046\105" +
    "\047\100\050\uffc0\051\uffc0\001\002\000\046\014\uffc3\015" +
    "\uffc3\020\uffc3\022\uffc3\024\uffc3\031\uffc3\036\uffc3\037\uffc3" +
    "\040\106\041\104\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046" +
    "\uffc3\047\uffc3\050\uffc3\051\uffc3\001\002\000\026\004\073" +
    "\005\063\006\062\007\070\020\130\037\061\052\074\055" +
    "\072\056\067\060\071\001\002\000\006\015\131\020\132" +
    "\001\002\000\046\014\uffcd\015\uffcd\020\uffcd\022\uffcd\024" +
    "\uffcd\031\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd" +
    "\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\001\002\000\024\004\073\005\063\006\062\007\070" +
    "\037\061\052\074\055\072\056\067\060\071\001\002\000" +
    "\046\014\uffce\015\uffce\020\uffce\022\uffce\024\uffce\031\uffce" +
    "\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044" +
    "\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\001\002" +
    "\000\042\014\uffe9\015\uffe9\020\uffe9\022\uffe9\036\101\037" +
    "\076\040\106\041\104\042\102\043\107\044\110\045\103" +
    "\046\105\047\100\050\077\051\111\001\002\000\046\014" +
    "\uffb8\015\uffb8\020\uffb8\022\uffb8\024\uffb8\031\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045" +
    "\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\001\002\000\012" +
    "\014\uffe4\015\uffe4\020\uffe4\035\uffe4\001\002\000\026\004" +
    "\uffe0\023\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\054\uffe0\001\002\000\026\004\073\005" +
    "\063\006\062\007\070\022\uffeb\037\061\052\074\055\072" +
    "\056\067\060\071\001\002\000\006\015\131\022\uffec\001" +
    "\002\000\004\022\142\001\002\000\004\014\143\001\002" +
    "\000\006\002\ufff1\016\ufff1\001\002\000\024\004\073\005" +
    "\063\006\062\007\070\037\061\052\074\055\072\056\067" +
    "\060\071\001\002\000\006\015\131\020\146\001\002\000" +
    "\004\014\uffd0\001\002\000\034\024\150\036\101\037\076" +
    "\040\106\041\104\042\102\043\107\044\110\045\103\046" +
    "\105\047\100\050\077\051\111\001\002\000\014\004\046" +
    "\023\044\030\040\033\035\034\045\001\002\000\022\004" +
    "\046\023\044\025\152\026\uffd8\027\uffd8\030\040\033\035" +
    "\034\045\001\002\000\024\004\073\005\063\006\062\007" +
    "\070\037\061\052\074\055\072\056\067\060\071\001\002" +
    "\000\010\025\152\026\uffd8\027\uffd8\001\002\000\006\026" +
    "\uffd5\027\155\001\002\000\014\004\046\023\044\030\040" +
    "\033\035\034\045\001\002\000\004\026\157\001\002\000" +
    "\004\014\uffd9\001\002\000\016\004\046\023\044\026\uffd4" +
    "\030\040\033\035\034\045\001\002\000\006\026\uffd7\027" +
    "\uffd7\001\002\000\034\024\163\036\101\037\076\040\106" +
    "\041\104\042\102\043\107\044\110\045\103\046\105\047" +
    "\100\050\077\051\111\001\002\000\014\004\046\023\044" +
    "\030\040\033\035\034\045\001\002\000\022\004\046\023" +
    "\044\025\uffd6\026\uffd6\027\uffd6\030\040\033\035\034\045" +
    "\001\002\000\026\004\uffdd\023\uffdd\025\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\032\uffdd\033\uffdd\034\uffdd\054\uffdd\001\002" +
    "\000\004\022\167\001\002\000\004\014\170\001\002\000" +
    "\006\002\uffef\016\uffef\001\002\000\026\004\uffda\023\uffda" +
    "\025\uffda\026\uffda\027\uffda\030\uffda\032\uffda\033\uffda\034" +
    "\uffda\054\uffda\001\002\000\036\014\171\031\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\001\002\000\034" +
    "\031\203\036\101\037\076\040\106\041\104\042\102\043" +
    "\107\044\110\045\103\046\105\047\100\050\077\051\111" +
    "\001\002\000\042\015\uffe5\017\126\031\uffc6\035\uffe5\036" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\001\002\000" +
    "\016\004\046\023\044\030\040\033\035\034\045\054\176" +
    "\001\002\000\024\004\073\005\063\006\062\007\070\037" +
    "\061\052\074\055\072\056\067\060\071\001\002\000\034" +
    "\031\200\036\101\037\076\040\106\041\104\042\102\043" +
    "\107\044\110\045\103\046\105\047\100\050\077\051\111" +
    "\001\002\000\014\004\046\023\044\030\040\033\035\034" +
    "\045\001\002\000\016\004\046\023\044\030\040\032\202" +
    "\033\035\034\045\001\002\000\004\014\uffd3\001\002\000" +
    "\014\004\046\023\044\030\040\033\035\034\045\001\002" +
    "\000\016\004\046\023\044\030\040\032\205\033\035\034" +
    "\045\001\002\000\004\014\uffd2\001\002\000\026\004\uffdb" +
    "\023\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\054\uffdb\001\002\000\004\004\210\001\002" +
    "\000\010\014\uffe5\015\uffe5\020\uffe5\001\002\000\006\015" +
    "\057\020\212\001\002\000\004\014\uffd1\001\002\000\006" +
    "\015\uffed\021\uffed\001\002\000\012\010\007\011\010\012" +
    "\016\013\012\001\002\000\014\010\007\011\010\012\016" +
    "\013\012\057\031\001\002\000\006\015\032\021\217\001" +
    "\002\000\026\004\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe" +
    "\023\ufffe\030\ufffe\033\ufffe\034\ufffe\054\ufffe\001\002\000" +
    "\026\004\046\010\007\011\010\012\016\013\012\023\044" +
    "\030\040\033\035\034\045\054\221\001\002\000\026\004" +
    "\073\005\063\006\062\007\070\022\uffeb\037\061\052\074" +
    "\055\072\056\067\060\071\001\002\000\016\004\046\023" +
    "\044\030\040\033\035\034\045\054\223\001\002\000\026" +
    "\004\073\005\063\006\062\007\070\022\uffeb\037\061\052" +
    "\074\055\072\056\067\060\071\001\002\000\004\022\225" +
    "\001\002\000\004\014\226\001\002\000\006\002\ufff2\016" +
    "\ufff2\001\002\000\004\022\230\001\002\000\004\014\231" +
    "\001\002\000\006\002\ufff0\016\ufff0\001\002\000\006\014" +
    "\uffe7\020\uffe7\001\002\000\010\014\uffe6\015\057\020\uffe6" +
    "\001\002\000\010\014\ufff6\015\ufff6\035\243\001\002\000" +
    "\006\014\237\015\236\001\002\000\004\004\240\001\002" +
    "\000\030\004\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\016" +
    "\ufffb\023\ufffb\030\ufffb\033\ufffb\034\ufffb\054\ufffb\001\002" +
    "\000\010\014\ufff5\015\ufff5\035\241\001\002\000\024\004" +
    "\073\005\063\006\062\007\070\037\061\052\074\055\072" +
    "\056\067\060\071\001\002\000\036\014\ufff3\015\ufff3\036" +
    "\101\037\076\040\106\041\104\042\102\043\107\044\110" +
    "\045\103\046\105\047\100\050\077\051\111\001\002\000" +
    "\024\004\073\005\063\006\062\007\070\037\061\052\074" +
    "\055\072\056\067\060\071\001\002\000\036\014\ufff4\015" +
    "\ufff4\036\101\037\076\040\106\041\104\042\102\043\107" +
    "\044\110\045\103\046\105\047\100\050\077\051\111\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\006\003\003\004\004\001\001\000\002\001" +
    "\001\000\012\005\013\006\010\007\005\023\014\001\001" +
    "\000\004\002\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\021" +
    "\027\022\030\024\001\001\000\004\031\232\001\001\000" +
    "\002\001\001\000\010\007\025\024\026\032\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\025\032\212" +
    "\001\001\000\004\004\033\001\001\000\030\006\010\007" +
    "\005\010\050\011\036\012\040\014\042\015\051\016\035" +
    "\017\052\031\047\033\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\010\050\011\036" +
    "\012\171\013\172\014\042\015\051\016\035\017\052\031" +
    "\047\033\174\001\001\000\002\001\001\000\012\012\064" +
    "\013\063\025\165\026\137\001\001\000\002\001\001\000" +
    "\006\012\064\013\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\010\050\011\036\012\040\014\042\015" +
    "\051\016\135\017\052\031\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\064\013\063\026\065\001\001\000" +
    "\006\012\064\013\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\064\013" +
    "\074\001\001\000\002\001\001\000\006\012\064\013\124" +
    "\001\001\000\006\012\064\013\123\001\001\000\006\012" +
    "\064\013\122\001\001\000\006\012\064\013\121\001\001" +
    "\000\006\012\064\013\120\001\001\000\006\012\064\013" +
    "\117\001\001\000\006\012\064\013\116\001\001\000\006" +
    "\012\064\013\115\001\001\000\006\012\064\013\114\001" +
    "\001\000\006\012\064\013\113\001\001\000\006\012\064" +
    "\013\112\001\001\000\006\012\064\013\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\064\013" +
    "\063\026\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\064\013\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\064\013\063\025\140\026\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\064\013\063\026\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\050\011\036\012\040\014\042\015\051\016" +
    "\035\017\052\031\047\033\150\001\001\000\026\010\050" +
    "\011\036\012\040\014\042\015\051\016\135\017\052\020" +
    "\153\021\152\031\047\001\001\000\006\012\064\013\161" +
    "\001\001\000\006\020\160\021\152\001\001\000\004\022" +
    "\155\001\001\000\024\010\050\011\036\012\040\014\042" +
    "\015\051\016\035\017\052\031\047\033\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\010\050\011\036" +
    "\012\040\014\042\015\051\016\135\017\052\031\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\010\050" +
    "\011\036\012\040\014\042\015\051\016\035\017\052\031" +
    "\047\033\163\001\001\000\022\010\050\011\036\012\040" +
    "\014\042\015\051\016\135\017\052\031\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\010\050\011\036\012\040" +
    "\014\042\015\051\016\135\017\052\031\047\001\001\000" +
    "\006\012\064\013\176\001\001\000\002\001\001\000\024" +
    "\010\050\011\036\012\040\014\042\015\051\016\035\017" +
    "\052\031\047\033\200\001\001\000\022\010\050\011\036" +
    "\012\040\014\042\015\051\016\135\017\052\031\047\001" +
    "\001\000\002\001\001\000\024\010\050\011\036\012\040" +
    "\014\042\015\051\016\035\017\052\031\047\033\203\001" +
    "\001\000\022\010\050\011\036\012\040\014\042\015\051" +
    "\016\135\017\052\031\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\021\030\231\001\001\000\010\007\025\024\215" +
    "\032\027\001\001\000\002\001\001\000\004\004\217\001" +
    "\001\000\030\006\010\007\005\010\050\011\036\012\040" +
    "\014\042\015\051\016\035\017\052\031\047\033\221\001" +
    "\001\000\012\012\064\013\063\025\226\026\137\001\001" +
    "\000\022\010\050\011\036\012\040\014\042\015\051\016" +
    "\135\017\052\031\047\001\001\000\012\012\064\013\063" +
    "\025\223\026\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\064\013\241\001" +
    "\001\000\002\001\001\000\006\012\064\013\243\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }


	Yylex lexer;

	public parser(Yylex lexer){
	    super(lexer);
	    this.lexer = lexer;
    }
    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= VarDeclList ProcList 
            {
              ProgramOP RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VarDeclOP> vl = (ArrayList<VarDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ProcOP> pl = (ArrayList<ProcOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProgramOP(vl, pl) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramOP start_val = (ProgramOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VarDeclList ::= VarDeclList VarDecl 
            {
              ArrayList<VarDeclOP> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VarDeclOP> list = (ArrayList<VarDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclOP e = (VarDeclOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<VarDeclOP>)list).add(e); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarDeclList ::= 
            {
              ArrayList<VarDeclOP> RESULT =null;
		RESULT = new ArrayList<VarDeclOP>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProcList ::= Proc 
            {
              ArrayList<ProcOP> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcOP e = (ProcOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ProcOP> list = new ArrayList<ProcOP>(); list.add(e); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProcList ::= ProcList Proc 
            {
              ArrayList<ProcOP> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ProcOP> list = (ArrayList<ProcOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcOP e = (ProcOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<ProcOP>)list).add(e);  RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecl ::= Type IdListInit SEMI 
            {
              VarDeclOP RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeOP type = (TypeOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<IdInitOP> idList = (ArrayList<IdInitOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new VarDeclOP(type, idList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Type ::= INT 
            {
              TypeOP RESULT =null;
		RESULT = new TypeOP("int");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= BOOL 
            {
              TypeOP RESULT =null;
		RESULT = new TypeOP("bool");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= FLOAT 
            {
              TypeOP RESULT =null;
		RESULT = new TypeOP("float");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= STRING 
            {
              TypeOP RESULT =null;
		RESULT = new TypeOP("string");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IdListInit ::= ID 
            {
              ArrayList<IdInitOP> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<IdInitOP> list = new ArrayList<IdInitOP>(); list.add(new IdInitOP(new Constant("ID",id))); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IdListInit ::= IdListInit COMMA ID 
            {
              ArrayList<IdInitOP> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<IdInitOP> list = (ArrayList<IdInitOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList<IdInitOP>)list).add(new IdInitOP(new Constant("ID",id))); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdListInit ::= ID ASSIGN Expr 
            {
              ArrayList<IdInitOP> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<IdInitOP> list = new ArrayList<IdInitOP>(); list.add(new IdInitOP(new AssignOP(new Constant("ID",id),e))); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdListInit ::= IdListInit COMMA ID ASSIGN Expr 
            {
              ArrayList<IdInitOP> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<IdInitOP> list = (ArrayList<IdInitOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList<IdInitOP>)list).add(new IdInitOP(new AssignOP(new Constant("ID",id),e))); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Proc ::= PROC ID LPAR ParamDeclList RPAR ResultTypeList COLON VarDeclList StatList RETURN ReturnExprs CORP SEMI 
            {
              ProcOP RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ArrayList<ParDeclOP> pl = (ArrayList<ParDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int rtlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rtlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ArrayList<ResultTypeOP> rtl = (ArrayList<ResultTypeOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<VarDeclOP> vdl = (ArrayList<VarDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<StatOP> sl = (ArrayList<StatOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ReturnExprsOP re = (ReturnExprsOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= new ProcOP(new Constant("ID",id),pl,rtl,new ProcBodyOP(vdl,sl,re));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Proc ::= PROC ID LPAR RPAR ResultTypeList COLON VarDeclList StatList RETURN ReturnExprs CORP SEMI 
            {
              ProcOP RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int rtlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rtlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ArrayList<ResultTypeOP> rtl = (ArrayList<ResultTypeOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<VarDeclOP> vdl = (ArrayList<VarDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<StatOP> sl = (ArrayList<StatOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ReturnExprsOP re = (ReturnExprsOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= new ProcOP(new Constant("ID",id),rtl,new ProcBodyOP(vdl,sl,re));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Proc ::= PROC ID LPAR ParamDeclList RPAR ResultTypeList COLON VarDeclList RETURN ReturnExprs CORP SEMI 
            {
              ProcOP RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ArrayList<ParDeclOP> pl = (ArrayList<ParDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int rtlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rtlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<ResultTypeOP> rtl = (ArrayList<ResultTypeOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<VarDeclOP> vdl = (ArrayList<VarDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ReturnExprsOP re = (ReturnExprsOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= new ProcOP(new Constant("ID",id),pl,rtl,new ProcBodyOP(vdl,re));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Proc ::= PROC ID LPAR RPAR ResultTypeList COLON VarDeclList RETURN ReturnExprs CORP SEMI 
            {
              ProcOP RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int rtlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rtlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<ResultTypeOP> rtl = (ArrayList<ResultTypeOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<VarDeclOP> vdl = (ArrayList<VarDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ReturnExprsOP re = (ReturnExprsOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= new ProcOP(new Constant("ID",id),rtl,new ProcBodyOP(vdl,re));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ResultTypeList ::= ResultType 
            {
              ArrayList<ResultTypeOP> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ResultTypeOP r = (ResultTypeOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ResultTypeOP> list = new ArrayList<ResultTypeOP>(); list.add(r); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultTypeList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ResultTypeList ::= ResultTypeList COMMA ResultType 
            {
              ArrayList<ResultTypeOP> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ResultTypeOP> list = (ArrayList<ResultTypeOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ResultTypeOP r = (ResultTypeOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<ResultTypeOP>)list).add(r); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultTypeList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ReturnExprs ::= ExprList 
            {
              ReturnExprsOP RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExpressionOP> el = (ArrayList<ExpressionOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ReturnExprsOP(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnExprs",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ReturnExprs ::= 
            {
              ReturnExprsOP RESULT =null;
		RESULT = new ReturnExprsOP(new Constant("VOID"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnExprs",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ExprList ::= Expr 
            {
              ArrayList<ExpressionOP> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ExpressionOP> list = new ArrayList<ExpressionOP>(); list.add(e); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ExprList ::= ExprList COMMA Expr 
            {
              ArrayList<ExpressionOP> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ExpressionOP> list = (ArrayList<ExpressionOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<ExpressionOP>)list).add(e); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ParamDeclList ::= ParDecl 
            {
              ArrayList<ParDeclOP> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDeclOP p = (ParDeclOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ParDeclOP> list = new ArrayList<ParDeclOP>(); list.add(p); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ParamDeclList ::= ParamDeclList SEMI ParDecl 
            {
              ArrayList<ParDeclOP> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ParDeclOP> list = (ArrayList<ParDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDeclOP p = (ParDeclOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList<ParDeclOP>)list).add(p); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParDecl ::= Type IdList 
            {
              ParDeclOP RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeOP t = (TypeOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Constant> list = (ArrayList<Constant>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ParDeclOP(t,list);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IdList ::= ID 
            {
              ArrayList<Constant> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Constant> list = new ArrayList<Constant>(); list.add(new Constant("ID",id)); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IdList ::= IdList COMMA ID 
            {
              ArrayList<Constant> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Constant> list = (ArrayList<Constant>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<Constant>)list).add(new Constant("ID",id)); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ResultType ::= Type 
            {
              ResultTypeOP RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeOP t = (TypeOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ResultTypeOP(t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultType",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ResultType ::= VOID 
            {
              ResultTypeOP RESULT =null;
		RESULT = new ResultTypeOP(new Constant("VOID"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultType",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // StatList ::= Stat 
            {
              ArrayList<StatOP> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatOP s = (StatOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<StatOP> list = new ArrayList<StatOP>(); list.add(s); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // StatList ::= StatList Stat 
            {
              ArrayList<StatOP> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<StatOP> list = (ArrayList<StatOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatOP s = (StatOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList<StatOP>)list).add(s); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stat ::= IfStat SEMI 
            {
              StatOP RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IfOP i = (IfOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =new StatOP(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stat ::= WhileStat SEMI 
            {
              StatOP RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WhileOP w = (WhileOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =new StatOP(w);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= ReadlnStat SEMI 
            {
              StatOP RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ReadlnOP re = (ReadlnOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =new StatOP(re);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stat ::= WriteStat SEMI 
            {
              StatOP RESULT =null;
		int wrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WriteOP wr = (WriteOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =new StatOP(wr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stat ::= AssignStat SEMI 
            {
              StatOP RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssignOP a = (AssignOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =new StatOP(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= CallProc SEMI 
            {
              StatOP RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CallProcOP c = (CallProcOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =new StatOP(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IfStat ::= IF Expr THEN StatList ElifList Else FI 
            {
              IfOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExpressionOP e = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<StatOP> sl = (ArrayList<StatOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ElifOP> el = (ArrayList<ElifOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElseOP els = (ElseOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new IfOP(e,new BodyOP(sl),el,els);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ElifList ::= 
            {
              ArrayList<ElifOP> RESULT =null;
		RESULT = new ArrayList<ElifOP>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElifList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ElifList ::= Elif ElifList 
            {
              ArrayList<ElifOP> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElifOP e = (ElifOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ElifOP> list = (ArrayList<ElifOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<ElifOP>)list).add(e); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElifList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Elif ::= ELIF Expr THEN StatList 
            {
              ElifOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<StatOP> sl = (ArrayList<StatOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ElifOP(e,new BodyOP(sl));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elif",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Else ::= 
            {
              ElseOP RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Else ::= ELSE StatList 
            {
              ElseOP RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<StatOP> sl = (ArrayList<StatOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ElseOP(new BodyOP(sl));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // WhileStat ::= WHILE StatList RETURN Expr DO StatList OD 
            {
              WhileOP RESULT =null;
		int sl1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sl1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<StatOP> sl1 = (ArrayList<StatOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExpressionOP e = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sl2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sl2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<StatOP> sl2 = (ArrayList<StatOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new WhileOP(new BodyOP(sl1),e,new BodyOP(sl2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // WhileStat ::= WHILE Expr DO StatList OD 
            {
              WhileOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExpressionOP e = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<StatOP> sl = (ArrayList<StatOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new WhileOP(e,new BodyOP(sl));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ReadlnStat ::= READ LPAR IdList RPAR 
            {
              ReadlnOP RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Constant> list = (ArrayList<Constant>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ReadlnOP(list);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadlnStat",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // WriteStat ::= WRITE LPAR ExprList RPAR 
            {
              WriteOP RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExpressionOP> list = (ArrayList<ExpressionOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new WriteOP(list);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // AssignStat ::= IdList ASSIGN ExprList 
            {
              AssignOP RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Constant> idList = (ArrayList<Constant>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExpressionOP> eList = (ArrayList<ExpressionOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AssignOP(idList,eList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStat",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CallProc ::= ID LPAR ExprList RPAR 
            {
              CallProcOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExpressionOP> list = (ArrayList<ExpressionOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CallProcOP(new Constant("ID",e1),new ParamOP(list)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallProc",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CallProc ::= ID LPAR RPAR 
            {
              CallProcOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new CallProcOP(new Constant("ID",e1)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallProc",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr ::= NULL 
            {
              ExpressionOP RESULT =null;
		RESULT =  new Constant("NULL");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr ::= TRUE 
            {
              ExpressionOP RESULT =null;
		RESULT =  new Constant("bool","true");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr ::= FALSE 
            {
              ExpressionOP RESULT =null;
		RESULT =  new Constant("bool","false");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= INT_CONST 
            {
              ExpressionOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Constant("int",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= FLOAT_CONST 
            {
              ExpressionOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Constant("float",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= STRING_CONST 
            {
              ExpressionOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Constant("string",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= ID 
            {
              ExpressionOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Constant("ID",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= CallProc 
            {
              ExpressionOP RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallProcOP c = (CallProcOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= Expr PLUS Expr 
            {
              ExpressionOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e1 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e2 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new PlusOP(e1,e2 );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= Expr MINUS Expr 
            {
              ExpressionOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e1 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e2 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new MinusOP(e1,e2 );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Expr TIMES Expr 
            {
              ExpressionOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e1 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e2 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new TimesOP(e1,e2 );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= Expr DIV Expr 
            {
              ExpressionOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e1 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e2 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new DivOP(e1,e2 );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= Expr AND Expr 
            {
              ExpressionOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e1 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e2 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new AndOP(e1,e2 );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= Expr OR Expr 
            {
              ExpressionOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e1 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e2 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new OrOP(e1,e2 );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Expr GT Expr 
            {
              ExpressionOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e1 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e2 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new GtOP(e1,e2 );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr GE Expr 
            {
              ExpressionOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e1 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e2 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new GeOP(e1,e2 );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr LT Expr 
            {
              ExpressionOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e1 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e2 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new LtOP(e1,e2 );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr LE Expr 
            {
              ExpressionOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e1 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e2 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new LeOP(e1,e2 );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Expr EQ Expr 
            {
              ExpressionOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e1 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e2 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new EqOP(e1,e2 );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr NE Expr 
            {
              ExpressionOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionOP e1 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e2 = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new NeOP(e1,e2 );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= MINUS Expr 
            {
              ExpressionOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new UminusOP(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= NOT Expr 
            {
              ExpressionOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionOP e = (ExpressionOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new NotOP(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
