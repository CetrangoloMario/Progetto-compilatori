<?xml version="1.0" encoding="UTF-8" standalone="no"?><ProgramOP><VarDeclOP>(int)<IdInitOP><AssignOP>(ID, n)(int, 1)</AssignOP></IdInitOP></VarDeclOP><ProcOP>(ID, calcola_int)<ParDeclOP>(int)(ID, x)(ID, y)(ID, operazione)</ParDeclOP><ResultTypeOP>(VOID)</ResultTypeOP><ProcBodyOP><VarDeclOP>(int)<IdInitOP><AssignOP>(ID, result)(int, 0)</AssignOP></IdInitOP></VarDeclOP><IfOP><EqOP>(ID, operazione)(int, 1)</EqOP><BodyOP><AssignOP><PlusOP>(ID, x)(ID, y)</PlusOP>(ID, result)</AssignOP></BodyOP><ElifOP><EqOP>(ID, operazione)(int, 4)</EqOP><BodyOP><AssignOP><DivOP>(ID, x)(ID, y)</DivOP>(ID, result)</AssignOP></BodyOP></ElifOP><ElifOP><EqOP>(ID, operazione)(int, 3)</EqOP><BodyOP><AssignOP><TimesOP>(ID, x)(ID, y)</TimesOP>(ID, result)</AssignOP></BodyOP></ElifOP><ElifOP><EqOP>(ID, operazione)(int, 2)</EqOP><BodyOP><AssignOP><MinusOP>(ID, x)(ID, y)</MinusOP>(ID, result)</AssignOP></BodyOP></ElifOP><ElseOP><BodyOP><WriteOP>(string, ok)</WriteOP></BodyOP></ElseOP></IfOP><WriteOP>(string, Risultato di)(ID, x)(string,  e )(ID, y)(string,  :\n )(ID, result)</WriteOP><ReturnExprsOP>(VOID)</ReturnExprsOP></ProcBodyOP></ProcOP><ProcOP>(ID, calcola_double)<ParDeclOP>(float)(ID, x)(ID, y)</ParDeclOP><ParDeclOP>(int)(ID, operazione)</ParDeclOP><ResultTypeOP>(VOID)</ResultTypeOP><ProcBodyOP><VarDeclOP>(float)<IdInitOP><AssignOP>(ID, result)(float, 0.0)</AssignOP></IdInitOP></VarDeclOP><IfOP><EqOP>(ID, operazione)(int, 1)</EqOP><BodyOP><AssignOP><PlusOP>(ID, x)(ID, y)</PlusOP>(ID, result)</AssignOP></BodyOP><ElifOP><EqOP>(ID, operazione)(int, 4)</EqOP><BodyOP><AssignOP><DivOP>(ID, x)(ID, y)</DivOP>(ID, result)</AssignOP></BodyOP></ElifOP><ElifOP><EqOP>(ID, operazione)(int, 3)</EqOP><BodyOP><AssignOP><TimesOP>(ID, x)(ID, y)</TimesOP>(ID, result)</AssignOP></BodyOP></ElifOP><ElifOP><EqOP>(ID, operazione)(int, 2)</EqOP><BodyOP><AssignOP><MinusOP>(ID, x)(ID, y)</MinusOP>(ID, result)</AssignOP></BodyOP></ElifOP><ElseOP><BodyOP><WriteOP>(string, ok)</WriteOP></BodyOP></ElseOP></IfOP><WriteOP>(string, Risultato di)(ID, x)(string,  e )(ID, y)(string,  :\n )(ID, result)</WriteOP><ReturnExprsOP>(VOID)</ReturnExprsOP></ProcBodyOP></ProcOP><ProcOP>(ID, main)<ResultTypeOP>(VOID)</ResultTypeOP><ProcBodyOP><VarDeclOP>(int)<IdInitOP>(ID, operazione)</IdInitOP><IdInitOP><AssignOP>(ID, tipo_num)(int, 0)</AssignOP></IdInitOP></VarDeclOP><VarDeclOP>(int)<IdInitOP>(ID, x)</IdInitOP><IdInitOP><AssignOP>(ID, y)(int, 0)</AssignOP></IdInitOP></VarDeclOP><VarDeclOP>(float)<IdInitOP>(ID, z)</IdInitOP><IdInitOP><AssignOP>(ID, w)(float, 0.0)</AssignOP></IdInitOP></VarDeclOP><VarDeclOP>(bool)<IdInitOP><AssignOP>(ID, flag)(bool, false)</AssignOP></IdInitOP></VarDeclOP><WhileOP><EqOP>(ID, n)(int, 1)</EqOP><BodyOP><IfOP><NeOP>(ID, n)(int, 0)</NeOP><BodyOP><WriteOP>(string, Scegli operazione aritmetrica: )</WriteOP><WriteOP>(string, \n 1 = somma, 2 = differenza, 3 = moltiplicazione, 4 = divisione)</WriteOP><ReadlnOP>(ID, operazione)</ReadlnOP><WriteOP>(string, Operazioni effettui su interi o double, 1 o 2)</WriteOP><ReadlnOP>(ID, tipo_num)</ReadlnOP><IfOP><EqOP>(ID, tipo_num)(int, 1)</EqOP><BodyOP><WriteOP>(string, \n Inserisci il primo numero: \n)</WriteOP><ReadlnOP>(ID, x)</ReadlnOP><WriteOP>(string, \n Inserisci il secondo numero: \n)</WriteOP><ReadlnOP>(ID, y)</ReadlnOP><CallProcOP>(ID, calcola_int)<ParamOP>(ID, x)(ID, y)(ID, operazione)</ParamOP></CallProcOP></BodyOP></IfOP><IfOP><EqOP>(ID, tipo_num)(int, 2)</EqOP><BodyOP><WriteOP>(string, \n Inserisci il primo numero: \n)</WriteOP><ReadlnOP>(ID, z)</ReadlnOP><WriteOP>(string, \n Inserisci il secondo numero: \n)</WriteOP><ReadlnOP>(ID, w)</ReadlnOP><CallProcOP>(ID, calcola_double)<ParamOP>(ID, z)(ID, w)(ID, operazione)</ParamOP></CallProcOP></BodyOP></IfOP><WhileOP><EqOP>(ID, flag)(bool, false)</EqOP><BodyOP><WriteOP>(string, Vuoi continuare: inserisci 0 per terminare altrimenti 1.\n)</WriteOP><ReadlnOP>(ID, n)</ReadlnOP><IfOP><EqOP>(ID, n)(int, 0)</EqOP><BodyOP><WriteOP>(string,  Arrivederci\n\n)</WriteOP><AssignOP>(bool, true)(ID, flag)</AssignOP></BodyOP><ElifOP><NeOP>(ID, n)(int, 1)</NeOP><BodyOP><AssignOP>(bool, false)(ID, flag)</AssignOP></BodyOP></ElifOP><ElseOP><BodyOP><AssignOP>(bool, true)(ID, flag)</AssignOP></BodyOP></ElseOP></IfOP></BodyOP></WhileOP></BodyOP></IfOP></BodyOP></WhileOP><ReturnExprsOP>(VOID)</ReturnExprsOP></ProcBodyOP></ProcOP></ProgramOP>