<?xml version="1.0" encoding="UTF-8" standalone="no"?><ProgramOP><ProcOP>(ID, calcolaProdotto)<ParDeclOP>(float)(ID, n1)(ID, n2)</ParDeclOP><ResultTypeOP>(float)</ResultTypeOP><ProcBodyOP><VarDeclOP>(int)<IdInitOP><AssignOP>(ID, i)(int, 0)</AssignOP></IdInitOP></VarDeclOP><VarDeclOP>(float)<IdInitOP><AssignOP>(ID, temp)(float, 0.0)</AssignOP></IdInitOP></VarDeclOP><WhileOP><LtOP>(ID, i)(ID, n2)</LtOP><BodyOP><AssignOP><PlusOP>(ID, temp)(ID, n1)</PlusOP>(ID, temp)</AssignOP><AssignOP><PlusOP>(ID, i)(int, 1)</PlusOP>(ID, i)</AssignOP></BodyOP></WhileOP><ReturnExprsOP>(ID, temp)</ReturnExprsOP></ProcBodyOP></ProcOP><ProcOP>(ID, calcolaEsponente)<ParDeclOP>(float)(ID, n1)(ID, n2)</ParDeclOP><ResultTypeOP>(float)</ResultTypeOP><ProcBodyOP><VarDeclOP>(int)<IdInitOP><AssignOP>(ID, i)(int, 0)</AssignOP></IdInitOP></VarDeclOP><VarDeclOP>(float)<IdInitOP><AssignOP>(ID, temp)(float, 1.0)</AssignOP></IdInitOP></VarDeclOP><WhileOP><LtOP>(ID, i)(ID, n2)</LtOP><BodyOP><AssignOP><TimesOP>(ID, temp)(ID, n1)</TimesOP>(ID, temp)</AssignOP><AssignOP><PlusOP>(ID, i)(int, 1)</PlusOP>(ID, i)</AssignOP></BodyOP></WhileOP><ReturnExprsOP>(ID, temp)</ReturnExprsOP></ProcBodyOP></ProcOP><ProcOP>(ID, succFibonacci)<ParDeclOP>(float)(ID, n1)</ParDeclOP><ResultTypeOP>(float)</ResultTypeOP><ProcBodyOP><VarDeclOP>(float)<IdInitOP><AssignOP>(ID, fib)(float, 0.0)</AssignOP></IdInitOP><IdInitOP>(ID, fib1)</IdInitOP><IdInitOP>(ID, fib2)</IdInitOP><IdInitOP>(ID, i)</IdInitOP></VarDeclOP><IfOP><OrOP><EqOP>(ID, n1)(int, 0)</EqOP><EqOP>(ID, n1)(int, 1)</EqOP></OrOP><BodyOP><AssignOP>(int, 1)(ID, fib)</AssignOP></BodyOP><ElseOP><BodyOP><AssignOP>(int, 1)(ID, fib1)</AssignOP><AssignOP>(int, 2)(ID, fib2)</AssignOP><AssignOP>(int, 1)(ID, i)</AssignOP><WhileOP><LtOP>(ID, i)(ID, n1)</LtOP><BodyOP><AssignOP><PlusOP>(ID, fib1)(ID, fib2)</PlusOP>(ID, fib)</AssignOP><AssignOP><PlusOP>(ID, i)(int, 1)</PlusOP>(ID, i)</AssignOP><AssignOP>(ID, fib1)(ID, fib2)</AssignOP><AssignOP>(ID, fib)(ID, fib1)</AssignOP></BodyOP></WhileOP></BodyOP></ElseOP></IfOP><ReturnExprsOP>(ID, fib)</ReturnExprsOP></ProcBodyOP></ProcOP><ProcOP>(ID, calcola)<ParDeclOP>(int)(ID, n)</ParDeclOP><ParDeclOP>(float)(ID, num1)(ID, num2)</ParDeclOP><ResultTypeOP>(float)</ResultTypeOP><ProcBodyOP><VarDeclOP>(float)<IdInitOP><AssignOP>(ID, result)(float, 0.0)</AssignOP></IdInitOP></VarDeclOP><IfOP><EqOP>(ID, n)(int, 1)</EqOP><BodyOP><AssignOP><PlusOP>(ID, num1)(ID, num2)</PlusOP>(ID, result)</AssignOP></BodyOP><ElifOP><EqOP>(ID, n)(int, 5)</EqOP><BodyOP><AssignOP><CallProcOP>(ID, succFibonacci)<ParamOP>(ID, num1)</ParamOP></CallProcOP>(ID, result)</AssignOP></BodyOP></ElifOP><ElifOP><EqOP>(ID, n)(int, 4)</EqOP><BodyOP><IfOP><LtOP>(ID, num2)(int, 0)</LtOP><BodyOP><WriteOP>(string, Numero inserito non positivo non si può fare la elevazione)</WriteOP><AssignOP>(float, 0.0)(ID, result)</AssignOP></BodyOP><ElseOP><BodyOP><AssignOP><CallProcOP>(ID, calcolaEsponente)<ParamOP>(ID, num1)(ID, num2)</ParamOP></CallProcOP>(ID, result)</AssignOP></BodyOP></ElseOP></IfOP></BodyOP></ElifOP><ElifOP><EqOP>(ID, n)(int, 3)</EqOP><BodyOP><IfOP><LtOP>(ID, num1)(int, 1)</LtOP><BodyOP><WriteOP>(string, Numero inserito non positivo non si può fare la divisione)</WriteOP><AssignOP>(float, 0.0)(ID, result)</AssignOP></BodyOP><ElifOP><LtOP>(ID, num2)(int, 1)</LtOP><BodyOP><WriteOP>(string, Numero inserito non positivo non si può fare la divisione)</WriteOP><AssignOP>(float, 0.0)(ID, result)</AssignOP></BodyOP></ElifOP><ElseOP><BodyOP><AssignOP><DivOP>(ID, num1)(ID, num2)</DivOP>(ID, result)</AssignOP></BodyOP></ElseOP></IfOP></BodyOP></ElifOP><ElifOP><EqOP>(ID, n)(int, 2)</EqOP><BodyOP><AssignOP><CallProcOP>(ID, calcolaProdotto)<ParamOP>(ID, num1)(ID, num2)</ParamOP></CallProcOP>(ID, result)</AssignOP></BodyOP></ElifOP></IfOP><ReturnExprsOP>(ID, result)</ReturnExprsOP></ProcBodyOP></ProcOP><ProcOP>(ID, main)<ResultTypeOP>(VOID)</ResultTypeOP><ProcBodyOP><VarDeclOP>(int)<IdInitOP>(ID, operazione)</IdInitOP><IdInitOP><AssignOP>(ID, n)(int, 1)</AssignOP></IdInitOP></VarDeclOP><VarDeclOP>(float)<IdInitOP>(ID, num1)</IdInitOP><IdInitOP>(ID, num2)</IdInitOP><IdInitOP>(ID, result)</IdInitOP></VarDeclOP><VarDeclOP>(bool)<IdInitOP><AssignOP>(ID, flag)(bool, true)</AssignOP></IdInitOP></VarDeclOP><WhileOP>(ID, flag)<BodyOP><IfOP><NeOP>(ID, n)(int, 0)</NeOP><BodyOP><WriteOP>(string, Scegli operazione aritmetrica: \n)</WriteOP><WriteOP>(string, \n 1 = somma, 2 = moltiplicazione, 3 = divisione, 4 = elevamento a potenza, 5 = successione di Fibonacci\n\n)</WriteOP><ReadlnOP>(ID, operazione)</ReadlnOP><IfOP><AndOP><GeOP>(ID, operazione)(int, 1)</GeOP><LtOP>(ID, operazione)(int, 5)</LtOP></AndOP><BodyOP><WriteOP>(string, \n Inserisci il primo numero: \n)</WriteOP><ReadlnOP>(ID, num1)</ReadlnOP><WriteOP>(string, \n Inserisci il secondo numero: \n)</WriteOP><ReadlnOP>(ID, num2)</ReadlnOP><WriteOP>(string, Risultato è: )<CallProcOP>(ID, calcola)<ParamOP>(ID, operazione)(ID, num1)(ID, num2)</ParamOP></CallProcOP></WriteOP></BodyOP><ElifOP><EqOP>(ID, operazione)(int, 5)</EqOP><BodyOP><WriteOP>(string, \n Inserisci il primo numero: \n)</WriteOP><ReadlnOP>(ID, num1)</ReadlnOP><WriteOP>(string, Risultato è: )<CallProcOP>(ID, calcola)<ParamOP>(ID, operazione)(ID, num1)(ID, num1)</ParamOP></CallProcOP></WriteOP></BodyOP></ElifOP><ElseOP><BodyOP><WriteOP>(string, \tNumero inserito non valido\n)</WriteOP><AssignOP>(int, 0)(ID, n)</AssignOP><AssignOP>(bool, false)(ID, flag)</AssignOP></BodyOP></ElseOP></IfOP><WriteOP>(string, \t\t FINE \n\n)</WriteOP></BodyOP></IfOP></BodyOP></WhileOP><ReturnExprsOP>(VOID)</ReturnExprsOP></ProcBodyOP></ProcOP></ProgramOP>