<?xml version="1.0" encoding="UTF-8" standalone="no"?><ProgramOP><VarDeclOP>(int)<IdInitOP><AssignOP>(ID, n)(INT_CONST, 0)</AssignOP></IdInitOP></VarDeclOP><ProcOP>(ID, factorial)<ParDeclOP>(int)(ID, n)</ParDeclOP><ResultTypeOP>(int)</ResultTypeOP><ProcBodyOP><VarDeclOP>(int)<IdInitOP><AssignOP>(ID, result)(INT_CONST, 0)</AssignOP></IdInitOP></VarDeclOP><IfOP><EqOP>(ID, n)(INT_CONST, 0)</EqOP><BodyOP><AssignOP>(INT_CONST, 1)(ID, result)</AssignOP></BodyOP><ElseOP><BodyOP><AssignOP><TimesOP>(ID, n)<CallProcOP>(ID, factorial)</CallProcOP></TimesOP>(ID, result)</AssignOP></BodyOP></ElseOP></IfOP><ReturnExprsOP>(ID, result)</ReturnExprsOP></ProcBodyOP></ProcOP><ProcOP>(ID, main)<ResultTypeOP>(VOID)</ResultTypeOP><ProcBodyOP><WhileOP><BodyOP><WriteOP>(STRING_CONST, Enter n, or &gt;= 10 to exit: )</WriteOP><ReadlnOP>(ID, n)</ReadlnOP></BodyOP><LtOP>(ID, n)(INT_CONST, 10)</LtOP><BodyOP><WriteOP>(STRING_CONST, Factorial of )(ID, n)(STRING_CONST,  is )<CallProcOP>(ID, factorial)</CallProcOP>(STRING_CONST, \n)</WriteOP></BodyOP></WhileOP><ReturnExprsOP>(VOID)</ReturnExprsOP></ProcBodyOP></ProcOP></ProgramOP>